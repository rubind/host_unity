// Version History
// Version 1; starting with a modified version of STEP6 of UNITY

functions {
    real multi_skewnormal_log (vector x, vector mu, matrix cmat, vector alpha) {
        return multi_normal_log(x, mu, cmat)
             + normal_cdf_log(  alpha'*(x - mu), 0, 1);
    }
}

data {
    int<lower=1> n_sne; // number of SNe
    int<lower=2> n_props;  // e.i. mb, x1, c, mass, ect
    int<lower=0> n_non_gaus_props; // e.i. local and/or global age
    int<lower=1> n_sn_set;

    int<lower=0, upper=n_sn_set - 1> sn_set_inds[n_sne]; // use python index numbering

    vector <lower=0> [n_sne] z_helio;
    vector <lower=0> [n_sne] z_CMB;
    
    vector[n_props - n_non_gaus_props] obs_mBx1c [n_sne];  // don't include the non-gaussian age property.
    matrix[n_props - n_non_gaus_props, n_props - n_non_gaus_props] obs_mBx1c_cov [n_sne];

    int<lower=0> n_age_mix;
    vector[n_age_mix] age_gaus_mean [n_non_gaus_props, n_sne];   // shape of (n_non_gaus_props, n_sne, n_age_mix)
    vector[n_age_mix] age_gaus_std [n_non_gaus_props, n_sne];
    simplex[n_age_mix] age_gaus_A [n_non_gaus_props, n_sne];

    int do_fullDint;

    real outl_frac_prior_lnmean;
    real outl_frac_prior_lnwidth;

    //real outl_mBx1cU_uncertainties [n_props];
    int lognormal_intr_prior;
    int allow_alpha_S_N; // 1 if skewed population distributions

}

transformed data {
    int<lower=2> n_gaus_props;
    n_gaus_props = n_props-n_non_gaus_props;
}


parameters {
    real MB [n_sn_set];
    vector<lower = -1.47, upper = 1.47>[n_props - 1] coeff_angles;

    //real log10_sigma_int;
    real <lower = 0> sigma_int [n_sn_set];
    simplex [n_props] mBx1c_int_variance;// [n_sn_set];

    // This contains x1, c, host mas, age, and maybe more
    vector [n_props - 1] true_x1cs [n_sne];

    vector [n_props - 1] x1c_star [n_sn_set];
    vector [n_props - 1] log10_R_x1c [n_sn_set];
    cholesky_factor_corr[n_props - 1] x1c_Lmat [n_sn_set];
    vector [n_props - 1] alpha_S_N [n_sn_set];

    real <lower = 0, upper = 0.1> outl_frac [n_sn_set];
}


transformed parameters {
    vector [n_props - 1] coeff;

    vector [n_props - 1] R_x1c [n_sn_set];

    matrix [n_props - 1, n_props - 1] x1c_rho_mat [n_sn_set];
    matrix [n_props - 1, n_props - 1] x1c_pop_cov_mat [n_sn_set];

// AAAAA


    coeff = tan(coeff_angles);


    for (i in 1:n_sn_set) {
        R_x1c[i] = exp(log(10.) * log10_R_x1c[i]);
        x1c_rho_mat[i] = x1c_Lmat[i] * x1c_Lmat[i]';
        x1c_pop_cov_mat[i] = x1c_rho_mat[i] .* (R_x1c[i] * R_x1c[i]');
    }



}
// BBBBB
model {

    real term1;
    real term2;
    vector [n_age_mix] term3;

    // This does not contain age because age is non-gaussian
    vector [n_gaus_props] model_mBx1c [n_sne];
    matrix [n_gaus_props, n_gaus_props] model_mBx1c_cov [n_sne];

    real log10_sigma_int [n_sne];

    vector [n_sne] model_mu;

    vector [n_sne] outl_loglike;
    vector [n_sne] PointPosteriors;
    real target_non_gaus;

    matrix [n_gaus_props, n_gaus_props] outl_mBx1c_cov;


// CCCCC

    // -------------Begin numerical integration-----------------

    model_mu = (5./log(10.))*log((1. + z_helio) .* (1.00038*z_CMB - 0.227753*exp(log(z_CMB)*2) - 0.0440361*exp(log(z_CMB)*3) + 0.0619502*exp(log(z_CMB)*4) -  0.0220087*exp(log(z_CMB)*5) + 0.00289242*exp(log(z_CMB)*6)  )) + 43.1586133146;

    // -------------End numerical integration---------------

    for (i in 1:n_sn_set) {
        log10_sigma_int[i] = log10(sigma_int[i]);
    }



    model_mBx1c_cov = obs_mBx1c_cov;
    target_non_gaus = 0;

    for (i in 1:n_sne) {

        // add non-grey distribution for Gaussian parameters
    	if (do_fullDint == 1) {
       	    model_mBx1c_cov[i][1,1] = model_mBx1c_cov[i][1,1] + mBx1c_int_variance[1]*pow(100, log10_sigma_int[sn_set_inds[i] + 1]);
                model_mBx1c_cov[i][2,2] = model_mBx1c_cov[i][2,2] + mBx1c_int_variance[2]*pow(100, log10_sigma_int[sn_set_inds[i] + 1])/(0.1*0.1);
       	    model_mBx1c_cov[i][3,3] = model_mBx1c_cov[i][3,3] + mBx1c_int_variance[3]*pow(100, log10_sigma_int[sn_set_inds[i] + 1])/(3.0*3.0); // This is really -3, but it doesn't matter
           	for (j in 1:n_props) {
                        model_mBx1c_cov[i][3+j,3+j] = model_mBx1c_cov[i][3+j,3+j] + mBx1c_int_variance[3+j]*pow(100, log10_sigma_int[sn_set_inds[i] + 1])/(0.1*0.1);
                }
        } else {
                model_mBx1c_cov[i][1,1] = model_mBx1c_cov[i][1,1] + pow(100, log10_sigma_int[sn_set_inds[i] + 1]);
            }


        model_mBx1c[i][1] = coeff' * true_x1cs[i] + MB[sn_set_inds[i] + 1] + model_mu[i];
        for (j in 2:n_gaus_props){
            model_mBx1c[i][j] = true_x1cs[i][j-1];
        }


        outl_mBx1c_cov = model_mBx1c_cov[i];
        outl_mBx1c_cov[1,1] = outl_mBx1c_cov[1,1] + 0.25;

        term1 = log(1 - outl_frac[sn_set_inds[i] + 1]) + multi_normal_log(obs_mBx1c[i], model_mBx1c[i], model_mBx1c_cov[i]);
        term2 = log(outl_frac[sn_set_inds[i] + 1]) + multi_normal_log(obs_mBx1c[i], model_mBx1c[i], outl_mBx1c_cov);


        outl_loglike[i] = term1 - term2;

    	//log_sum_exp exponentiates the log(normal), sums the terms, and then takes the log.
        PointPosteriors[i] = log_sum_exp(term1, term2);

        for (j in 1:n_non_gaus_props){
            // make "age" from Gaussian mixutre
            for (k in 1:n_age_mix){
                term3[k] = log(age_gaus_A[j, i][k]) + normal_lpdf(true_x1cs[i, n_gaus_props - 1 + j] | age_gaus_mean[j, i][k], age_gaus_std[j, i][k]); 
            }
            // add resulting mixture to variable to be added to log-posterior
            target_non_gaus += log_sum_exp(term3);
        }
    }

// DDDDD

    target += sum(PointPosteriors);
    target += target_non_gaus;

    for (i in 1:n_sne) {
        if (allow_alpha_S_N == 1) {
            increment_log_prob(multi_skewnormal_log(true_x1cs[i], x1c_star[sn_set_inds[i] + 1],
					        x1c_pop_cov_mat[sn_set_inds[i] + 1], alpha_S_N[sn_set_inds[i] + 1]));
        } else {
            true_x1cs[i] ~ multi_normal(x1c_star[sn_set_inds[i] + 1],
					        x1c_pop_cov_mat[sn_set_inds[i] + 1]);
        }
    }



    for (i in 1:n_sn_set) {
        x1c_Lmat[i] ~ lkj_corr_cholesky(1.0);
        outl_frac[i] ~ lognormal(outl_frac_prior_lnmean, outl_frac_prior_lnwidth);

        if (lognormal_intr_prior == 1) {
            sigma_int[i] ~ lognormal(-2.3, 0.5);
        }

        alpha_S_N[i][1] ~ normal(0, 5);
        alpha_S_N[i][2] ~ normal(0, 50);
        for (j in 3:(n_props - 1)) {
            alpha_S_N[i][j] ~ normal(0, 5);
        }
    }

    sigma_int ~ normal(0, 0.2);
}

